#include <libopencm3/stm32/usart.h>
#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/gpio.h>
#include <libopencm3/stm32/timer.h>
#include <libopencm3/stm32/dma.h>
#include <libopencm3/cm3/systick.h>
#include <libopencm3/cm3/nvic.h>




	int temperature_time=0;

	int heater_mode = -1;
	float t_high = 0;

	while (1) {
		float t;
		int last_value = current_temperature;
		if (last_value != -1) {
			float adc_sample = sqrt((float)last_value / ntc_resistor.size) ;
			
			// float ntc_resistance = R1 * adc_sample * VREF / (4095.0 * VREF - (adc_sample * VREF));
			//x = (r * s * v) / (t * v - (s * v))

			float ntc_resistance = R1 * adc_sample / (4095.0 - adc_sample);



			float v = ntc_resistance / NTC_R;
			t = 1.0 / (NTC_A1 + NTC_B1 * log(v) + NTC_C1 * log2(v) + NTC_D1 * cbrt(v)) - T0_K;
			//(r * s) / (t - s)

			switch (heater_mode) {
				case -1:	//Begin with cooldown
					heater_mode = 0;
					set_indicator_rgb(LED_GREEN);				
					break;

				case 0:
					if (t <= T_MEAS_LOW) {						
						heater_mode = 1;
						heater_pwm = 0;

						if (cooloff_timer != -1) {
							float measured_time = (float)cooloff_timer/1000.0;
							send_int(MSG_MEASURED_TIME);
							send_float(t_high);
							send_float(t);
							send_float(measured_time);
						}

						cooloff_timer = -1; //stop timer
					}

					break;

				case 1:

					set_indicator_rgb(heater_pwm/50, heater_pwm/150, 0);


					if (heater_pwm < 4095) {
						heater_pwm = MIN(heater_pwm + 15, 4095);
						TIM2_CCR3 = heater_pwm;
					}


					if (t >= T_MEAS_HIGH) {
						t_high = t;
						heater_mode = 0;
						heater_pwm = 0;
						TIM2_CCR3 = heater_pwm;
						cooloff_timer = 0;		//Start timer

						set_indicator_rgb(LED_GREEN);
					}
					break;

			}



		}
		sleep_ms(10);


		if (++temperature_time > 1000) {		//Every 10 seconds
			temperature_time=0;
			send_int(MSG_MEASURED_TEMP);
			send_float(t);
		}
	}


























	int pump_mode = 0;
	int pump_ramp = 0;


	while(1) {
	
	

		int r, g, b;

		colorHexagon(hue, &r, &g, &b);

		led_input_buf[0].r = r >> 4;
		led_input_buf[0].g = g >> 4;
		led_input_buf[0].b = b >> 4;

		process_buffer();
		send_led_buffer_blocking();


		switch (pump_mode) {
			case 0:
				TIM3_CCR3 = 0;
				if (++pump_ramp > 10000) {
					pump_mode = 1;
					pump_ramp = 0;
				}
				break;

			case 1:
				TIM3_CCR3 = pump_ramp;
				if (++pump_ramp > 4095) {
					pump_mode = 2;
					pump_ramp = 0;
				}
				break;

			case 2:
				TIM3_CCR3 = 4095;
				if (++pump_ramp > 3000) {
					pump_mode = 3;
					pump_ramp = 0;
				}
				break;

			case 3:
				TIM3_CCR3 = 4095-pump_ramp;
				if (++pump_ramp > 4095) {
					pump_mode = 0;
					pump_ramp = 0;
				}
				break;

		}


		sleep_ms(1);
	}
























	//gpio_primary_remap(AFIO_MAPR_SWJ_CFG_FULL_SWJ, AFIO_MAPR_TIM2_REMAP_PARTIAL_REMAP2);


	//GP1 - resistor towards 3v3 and ntc towards gnd
	gpio_set_mode(GPIOA, GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, GPIO3);



	//ws2812b
	gpio_set_mode(GPIOB, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_ALTFN_OPENDRAIN, GPIO15);

	//Pump
	gpio_set_mode(GPIOB, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, GPIO0);

	//Heater
	gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, GPIO2);


	//usart
	gpio_set_mode(GPIOA, GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, GPIO_USART1_RX);
	gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, GPIO_USART1_TX);























void hw_init_gpio() {


	pump_init_gpio();
	moisture_sensor_init_gpio();
	led_init_gpio();
	uart_init_gpio();


}


void init_timer() {

	//THis is for the ws2812b

	TIM1_CR1 = TIM_CR1_CKD_CK_INT | TIM_CR1_CMS_EDGE;
	/* Period */
	TIM1_ARR = (24000000 / FREQ)-1;
	/* Prescaler */
	TIM1_PSC = 0;
	TIM1_EGR = TIM_EGR_UG;

	TIM1_BDTR |= TIM_BDTR_MOE; //test


	/* Polarity and state */
	TIM1_CCER |= TIM_CCER_CC3NE;
	TIM1_CCER &= ~TIM_CCER_CC3NP;
	TIM1_CCMR2 |= TIM_CCMR2_OC3M_PWM1 | TIM_CCMR2_OC3PE;


	/* ARR reload enable */
	TIM1_CR1 |= TIM_CR1_ARPE;


	/* Counter enable */
	TIM1_CR1 |= TIM_CR1_CEN;

	//TIM1_CCR3 = 3;






	//This is for the pump
//Configuring timer TIM3
	TIM3_CR1 = TIM_CR1_CKD_CK_INT | TIM_CR1_CMS_EDGE;
	TIM3_ARR = PWM_TOP;
	TIM3_PSC = 0;
	TIM3_EGR = TIM_EGR_UG;
	//Setup output compare
		TIM3_CCR3 = 0;	//Pump starts off
		TIM3_CCER |=  TIM_CCER_CC3E ;
		TIM3_CCMR2 |= TIM_CCMR2_OC3M_PWM1 | TIM_CCMR2_OC3PE ;

	TIM3_CR1 |= TIM_CR1_ARPE;
	TIM3_CR1 |= TIM_CR1_CEN;

	//This is for the heater
//Configuring timer TIM2
	TIM2_CR1 = TIM_CR1_CKD_CK_INT | TIM_CR1_CMS_EDGE;
	TIM2_ARR = PWM_TOP;
	TIM2_PSC = 0;
	TIM2_EGR = TIM_EGR_UG;
	//Setup output compare
		TIM2_CCR3 = 0;	//heater starts off
		TIM2_CCER |=  TIM_CCER_CC3E ;
		TIM2_CCMR2 |= TIM_CCMR2_OC3M_PWM1 | TIM_CCMR2_OC3PE ;

	TIM2_CR1 |= TIM_CR1_ARPE;
	TIM2_CR1 |= TIM_CR1_CEN;




}


void init_nvic() {

	nvic_set_priority(NVIC_DMA1_CHANNEL1_IRQ, 0);
	nvic_enable_irq(NVIC_DMA1_CHANNEL1_IRQ);

}




void init_rcc() {
	rcc_clock_setup_in_hsi_out_24mhz();
	rcc_periph_clock_enable(RCC_AFIO);
	rcc_periph_clock_enable(RCC_GPIOA);
	rcc_periph_clock_enable(RCC_GPIOB);
	rcc_periph_clock_enable(RCC_TIM3);
	rcc_periph_clock_enable(RCC_TIM2);
	rcc_periph_clock_enable(RCC_TIM1);
	rcc_periph_clock_enable(RCC_DMA1);
	rcc_periph_clock_enable(RCC_USART1);
	rcc_periph_clock_enable(RCC_ADC1);
}


